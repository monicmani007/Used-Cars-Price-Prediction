{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "import seaborn as sns\n",
    "import sklearn\n",
    "from sklearn import metrics\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import r2_score\n",
    "from math import sqrt\n",
    "from scipy.stats import uniform \n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.linear_model import Lasso\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reading the cleaned data\n",
    "df = pd.read_csv(\"cleaned2.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>price</th>\n",
       "      <th>year</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>condition</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>fuel</th>\n",
       "      <th>odometer</th>\n",
       "      <th>title_status</th>\n",
       "      <th>transmission</th>\n",
       "      <th>drive</th>\n",
       "      <th>type</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>35990</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>chevrolet</td>\n",
       "      <td>good</td>\n",
       "      <td>8 cylinders</td>\n",
       "      <td>gas</td>\n",
       "      <td>32742.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>other</td>\n",
       "      <td>2</td>\n",
       "      <td>other</td>\n",
       "      <td>south</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>7500</td>\n",
       "      <td>2014.0</td>\n",
       "      <td>hyundai</td>\n",
       "      <td>excellent</td>\n",
       "      <td>4 cylinders</td>\n",
       "      <td>gas</td>\n",
       "      <td>93600.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>automatic</td>\n",
       "      <td>2</td>\n",
       "      <td>sedan</td>\n",
       "      <td>south</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>4900</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>bmw</td>\n",
       "      <td>good</td>\n",
       "      <td>6 cylinders</td>\n",
       "      <td>gas</td>\n",
       "      <td>87046.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>automatic</td>\n",
       "      <td>2</td>\n",
       "      <td>SUV</td>\n",
       "      <td>south</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>29590</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>toyota</td>\n",
       "      <td>good</td>\n",
       "      <td>6 cylinders</td>\n",
       "      <td>gas</td>\n",
       "      <td>33290.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>other</td>\n",
       "      <td>4</td>\n",
       "      <td>pickup</td>\n",
       "      <td>south</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>39990</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>ford</td>\n",
       "      <td>good</td>\n",
       "      <td>8 cylinders</td>\n",
       "      <td>gas</td>\n",
       "      <td>9692.0</td>\n",
       "      <td>clean</td>\n",
       "      <td>other</td>\n",
       "      <td>2</td>\n",
       "      <td>coupe</td>\n",
       "      <td>south</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  price    year manufacturer  condition    cylinders fuel  \\\n",
       "0           0  35990  2010.0    chevrolet       good  8 cylinders  gas   \n",
       "1           1   7500  2014.0      hyundai  excellent  4 cylinders  gas   \n",
       "2           2   4900  2006.0          bmw       good  6 cylinders  gas   \n",
       "3           5  29590  2016.0       toyota       good  6 cylinders  gas   \n",
       "4           6  39990  2012.0         ford       good  8 cylinders  gas   \n",
       "\n",
       "   odometer title_status transmission  drive    type  state  \n",
       "0   32742.0        clean        other      2   other  south  \n",
       "1   93600.0        clean    automatic      2   sedan  south  \n",
       "2   87046.0        clean    automatic      2     SUV  south  \n",
       "3   33290.0        clean        other      4  pickup  south  \n",
       "4    9692.0        clean        other      2   coupe  south  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#converting price into logarithmic format\n",
    "df[\"price\"]=np.log1p(df[\"price\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encoding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For Numerical Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normalising year for optimization\n",
    "year_min = df[\"year\"].min()\n",
    "year_max = df[\"year\"].max()\n",
    "df[\"year\"] = ((df[\"year\"] - year_min) / (year_max - year_min))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### odometer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normalising odometer for optimization\n",
    "odo_min = df[\"odometer\"].min()\n",
    "odo_max = df[\"odometer\"].max()\n",
    "df[\"odometer\"] = ((df[\"odometer\"] - odo_min) / (odo_max - odo_min))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For Ordinal Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### cylinders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalizing Cylinder\n",
    "cyl_min = df[\"cylinders\"].min()\n",
    "cyl_max = df[\"cylinders\"].max()\n",
    "df[\"cylinders\"] = ((df[\"cylinders\"] - cyl_min) / (cyl_max - cyl_min))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### OneHotEncoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = pd.get_dummies(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "318824"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>price</th>\n",
       "      <th>year</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>odometer</th>\n",
       "      <th>drive</th>\n",
       "      <th>manufacturer_acura</th>\n",
       "      <th>manufacturer_alfa-romeo</th>\n",
       "      <th>manufacturer_aston-martin</th>\n",
       "      <th>manufacturer_audi</th>\n",
       "      <th>...</th>\n",
       "      <th>type_other</th>\n",
       "      <th>type_pickup</th>\n",
       "      <th>type_sedan</th>\n",
       "      <th>type_truck</th>\n",
       "      <th>type_van</th>\n",
       "      <th>type_wagon</th>\n",
       "      <th>state_midwest</th>\n",
       "      <th>state_northeast</th>\n",
       "      <th>state_south</th>\n",
       "      <th>state_west</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>10.491024</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.130950</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>8.922792</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.374431</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>8.497195</td>\n",
       "      <td>0.416667</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.348210</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>10.295226</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.133143</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>10.596410</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.038732</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      price      year  cylinders  odometer  drive  \\\n",
       "0           0  10.491024  0.583333   0.857143  0.130950      2   \n",
       "1           1   8.922792  0.750000   0.428571  0.374431      2   \n",
       "2           2   8.497195  0.416667   0.714286  0.348210      2   \n",
       "3           5  10.295226  0.833333   0.714286  0.133143      4   \n",
       "4           6  10.596410  0.666667   0.857143  0.038732      2   \n",
       "\n",
       "   manufacturer_acura  manufacturer_alfa-romeo  manufacturer_aston-martin  \\\n",
       "0                   0                        0                          0   \n",
       "1                   0                        0                          0   \n",
       "2                   0                        0                          0   \n",
       "3                   0                        0                          0   \n",
       "4                   0                        0                          0   \n",
       "\n",
       "   manufacturer_audi  ...  type_other  type_pickup  type_sedan  type_truck  \\\n",
       "0                  0  ...           1            0           0           0   \n",
       "1                  0  ...           0            0           1           0   \n",
       "2                  0  ...           0            0           0           0   \n",
       "3                  0  ...           0            1           0           0   \n",
       "4                  0  ...           0            0           0           0   \n",
       "\n",
       "   type_van  type_wagon  state_midwest  state_northeast  state_south  \\\n",
       "0         0           0              0                0            1   \n",
       "1         0           0              0                0            1   \n",
       "2         0           0              0                0            1   \n",
       "3         0           0              0                0            1   \n",
       "4         0           0              0                0            1   \n",
       "\n",
       "   state_west  \n",
       "0           0  \n",
       "1           0  \n",
       "2           0  \n",
       "3           0  \n",
       "4           0  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Splitting the Data into test and train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = train_df[\"price\"]\n",
    "x = train_df.drop(['price', 'Unnamed: 0'], axis=1)\n",
    "#splitting data into test and train\n",
    "x_train,x_test,y_train,y_test = sklearn.model_selection.train_test_split(x,y,test_size=0.2,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>odometer</th>\n",
       "      <th>drive</th>\n",
       "      <th>manufacturer_acura</th>\n",
       "      <th>manufacturer_alfa-romeo</th>\n",
       "      <th>manufacturer_aston-martin</th>\n",
       "      <th>manufacturer_audi</th>\n",
       "      <th>manufacturer_bmw</th>\n",
       "      <th>manufacturer_buick</th>\n",
       "      <th>...</th>\n",
       "      <th>type_other</th>\n",
       "      <th>type_pickup</th>\n",
       "      <th>type_sedan</th>\n",
       "      <th>type_truck</th>\n",
       "      <th>type_van</th>\n",
       "      <th>type_wagon</th>\n",
       "      <th>state_midwest</th>\n",
       "      <th>state_northeast</th>\n",
       "      <th>state_south</th>\n",
       "      <th>state_west</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>220052</th>\n",
       "      <td>0.958333</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.040324</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10665</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.273475</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102772</th>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.308018</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90016</th>\n",
       "      <td>0.791667</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.528394</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294161</th>\n",
       "      <td>0.708333</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.386033</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            year  cylinders  odometer  drive  manufacturer_acura  \\\n",
       "220052  0.958333   0.714286  0.040324      2                   0   \n",
       "10665   0.333333   0.428571  0.273475      2                   0   \n",
       "102772  0.750000   0.428571  0.308018      2                   0   \n",
       "90016   0.791667   0.428571  0.528394      4                   0   \n",
       "294161  0.708333   1.000000  0.386033      4                   0   \n",
       "\n",
       "        manufacturer_alfa-romeo  manufacturer_aston-martin  manufacturer_audi  \\\n",
       "220052                        0                          0                  0   \n",
       "10665                         0                          0                  0   \n",
       "102772                        0                          0                  0   \n",
       "90016                         0                          0                  0   \n",
       "294161                        0                          0                  0   \n",
       "\n",
       "        manufacturer_bmw  manufacturer_buick  ...  type_other  type_pickup  \\\n",
       "220052                 0                   0  ...           0            1   \n",
       "10665                  0                   0  ...           0            0   \n",
       "102772                 0                   0  ...           0            0   \n",
       "90016                  0                   0  ...           0            0   \n",
       "294161                 0                   0  ...           0            0   \n",
       "\n",
       "        type_sedan  type_truck  type_van  type_wagon  state_midwest  \\\n",
       "220052           0           0         0           0              0   \n",
       "10665            0           0         0           0              0   \n",
       "102772           1           0         0           0              1   \n",
       "90016            1           0         0           0              0   \n",
       "294161           0           1         0           0              1   \n",
       "\n",
       "        state_northeast  state_south  state_west  \n",
       "220052                0            1           0  \n",
       "10665                 0            0           1  \n",
       "102772                0            0           0  \n",
       "90016                 0            0           1  \n",
       "294161                0            0           0  \n",
       "\n",
       "[5 rows x 78 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_rmse = []\n",
    "test_rmse = []\n",
    "train_r2 = []\n",
    "test_r2 = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#GradientBoosting model\n",
    "gb_model = GradientBoostingRegressor(\n",
    "    n_estimators = 500, \n",
    "    max_depth = 8, \n",
    "    learning_rate = 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Training the Gradient boost model\n",
    "gb_model = gb_model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Predict test\n",
    "y_pred=gb_model.predict(x_test)\n",
    "#Predict train\n",
    "train_pred = gb_model.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse(Train): 0.2754892285733874\n",
      "rmse(Test): 0.28333842752516675\n"
     ]
    }
   ],
   "source": [
    "#train RMSE - Gradient Boosting\n",
    "mse1 = mean_squared_error(y_train, train_pred)\n",
    "rmse1 = sqrt(mse1)\n",
    "train_rmse.append(rmse1)\n",
    "print(\"rmse(Train):\", rmse1)\n",
    "#test RMSE - Gradient Boosting\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = sqrt(mse)\n",
    "test_rmse.append(rmse)\n",
    "print(\"rmse(Test):\", rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r_squared(Train): 0.8577193686904432\n",
      "r_squared(Test): 0.8485268276098412\n"
     ]
    }
   ],
   "source": [
    "#train R^2 - Gradient Boosting\n",
    "r_sqr1 = r2_score(y_train, train_pred)\n",
    "train_r2.append(r_sqr1)\n",
    "print(\"r_squared(Train):\",r_sqr1)\n",
    "#test R^2 - Gradient Boosting\n",
    "r_sqr = r2_score(y_test, y_pred)\n",
    "test_r2.append(r_sqr)\n",
    "print(\"r_squared(Test):\",r_sqr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>condition</td>\n",
       "      <td>0.011157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cylinders</td>\n",
       "      <td>0.090071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>drive</td>\n",
       "      <td>0.061055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fuel</td>\n",
       "      <td>0.050424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>manufacturer</td>\n",
       "      <td>0.064271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>odometer</td>\n",
       "      <td>0.154528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>state</td>\n",
       "      <td>0.012622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>title</td>\n",
       "      <td>0.005642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>transmission</td>\n",
       "      <td>0.006000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>type</td>\n",
       "      <td>0.064688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>year</td>\n",
       "      <td>0.479541</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         feature  importance\n",
       "0      condition    0.011157\n",
       "1      cylinders    0.090071\n",
       "2          drive    0.061055\n",
       "3           fuel    0.050424\n",
       "4   manufacturer    0.064271\n",
       "5       odometer    0.154528\n",
       "6          state    0.012622\n",
       "7          title    0.005642\n",
       "8   transmission    0.006000\n",
       "9           type    0.064688\n",
       "10          year    0.479541"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature importance for Gradient Boost Model\n",
    "cat_columns=['manufacturer','condition','cylinders','fuel','title_status','transmission','type','state']\n",
    "feature_imp = pd.DataFrame(list(zip(gb_model.feature_importances_,x_train)),columns = (\"importance\",\"features\"))\n",
    "\n",
    "feature_split = pd.DataFrame(feature_imp[\"features\"].str.split(\"_\",n = 1, expand = True))\n",
    "feature_cat = pd.concat([feature_imp[\"importance\"], feature_split], axis=1, join='inner')\n",
    "feature_cat.columns = [\"importance\",\"feature\",\"split2\"]\n",
    "feature_score = feature_cat.groupby('feature', as_index=False)['importance'].sum()\n",
    "feature_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#feature importance plot for gradient boosting model\n",
    "plt.figure(figsize=(12,6))\n",
    "sns.barplot(x=feature_score.feature, y=feature_score.importance,order = feature_score.sort_values('importance').feature)\n",
    "plt.title(\"Feature Importance for Gradient Boosting\")\n",
    "plt.ylabel(\"Importance\")\n",
    "plt.xlabel(\"Features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#XGBoost Model\n",
    "regressor = xgb.XGBRegressor(\n",
    "    n_estimators=100,\n",
    "    reg_lambda=1,\n",
    "    gamma=0,\n",
    "    max_depth=5\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
       "             importance_type='gain', interaction_constraints='',\n",
       "             learning_rate=0.300000012, max_delta_step=0, max_depth=5,\n",
       "             min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "             n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n",
       "             tree_method='exact', validate_parameters=1, verbosity=None)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training the XGBoost Model\n",
    "regressor.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predict test\n",
    "y_pred = regressor.predict(x_test)\n",
    "#Predict train\n",
    "train_pred = regressor.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse(Train): 0.2754892285733874\n",
      "rmse(Test): 0.28333842752516675\n"
     ]
    }
   ],
   "source": [
    "#train RMSE - XGBoost\n",
    "mse_train = mean_squared_error(y_train, train_pred)\n",
    "rmse = math.sqrt(mse_train)\n",
    "train_rmse.append(rmse)\n",
    "print(\"rmse(Train):\",rmse)\n",
    "#test RMSE - XGBoost\n",
    "mse = mean_squared_error(y_test,y_pred)\n",
    "rmse=math.sqrt(mse)\n",
    "test_rmse.append(rmse)\n",
    "rmse\n",
    "print(\"rmse(Test):\",rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r_squared(Train): 0.8577193686904432\n",
      "r_squared(Test): 0.8485268276098412\n"
     ]
    }
   ],
   "source": [
    "#train R^2 - XGBoost\n",
    "r_sqr1 = r2_score(y_train, train_pred)\n",
    "print(\"r_squared(Train):\",r_sqr1)\n",
    "train_r2.append(r_sqr1)\n",
    "#test R^2 - XGBoost\n",
    "r_sqr = r2_score(y_test, y_pred)\n",
    "test_r2.append(r_sqr)\n",
    "print(\"r_squared(Test):\",r_sqr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>condition</td>\n",
       "      <td>0.016470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cylinders</td>\n",
       "      <td>0.028663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>drive</td>\n",
       "      <td>0.045809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fuel</td>\n",
       "      <td>0.121036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>manufacturer</td>\n",
       "      <td>0.404269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>odometer</td>\n",
       "      <td>0.027604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>state</td>\n",
       "      <td>0.021960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>title</td>\n",
       "      <td>0.021583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>transmission</td>\n",
       "      <td>0.018939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>type</td>\n",
       "      <td>0.178855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>year</td>\n",
       "      <td>0.114812</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         feature  importance\n",
       "0      condition    0.016470\n",
       "1      cylinders    0.028663\n",
       "2          drive    0.045809\n",
       "3           fuel    0.121036\n",
       "4   manufacturer    0.404269\n",
       "5       odometer    0.027604\n",
       "6          state    0.021960\n",
       "7          title    0.021583\n",
       "8   transmission    0.018939\n",
       "9           type    0.178855\n",
       "10          year    0.114812"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature importance for XGBoost Model\n",
    "cat_columns=['manufacturer','condition','cylinders','fuel','title_status','transmission','type','state']\n",
    "feature_imp = pd.DataFrame(list(zip(regressor.feature_importances_,x_train)),columns = (\"importance\",\"features\"))\n",
    "\n",
    "feature_split = pd.DataFrame(feature_imp[\"features\"].str.split(\"_\",n = 1, expand = True))\n",
    "feature_cat = pd.concat([feature_imp[\"importance\"], feature_split], axis=1, join='inner')\n",
    "feature_cat.columns = [\"importance\",\"feature\",\"split2\"]\n",
    "feature_score = feature_cat.groupby('feature', as_index=False)['importance'].sum()\n",
    "feature_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#feature importance plot for XGBoost model\n",
    "plt.figure(figsize=(12,6))\n",
    "sns.barplot(x=feature_score.feature, y=feature_score.importance,order = feature_score.sort_values('importance').feature)\n",
    "plt.title(\"Feature Importance for XGBoost\")\n",
    "plt.ylabel(\"Importance\")\n",
    "plt.xlabel(\"Features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(n_estimators=20, n_jobs=-1, random_state=0)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Random Forest Model\n",
    "random_forest = RandomForestRegressor(\n",
    "    n_estimators=20, \n",
    "    random_state=0,\n",
    "    n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(n_estimators=20, n_jobs=-1, random_state=0)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training the Random Forest model\n",
    "random_forest.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predict test\n",
    "y_pred_test = random_forest.predict(x_test)\n",
    "#predict train\n",
    "y_pred_train = random_forest.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse(Train): 0.09451153577574196\n",
      "rmse(Test): 0.23749006346416757\n"
     ]
    }
   ],
   "source": [
    "#train RMSE - Random Forest\n",
    "mse_train = mean_squared_error(y_train, y_pred_train)\n",
    "rmse = math.sqrt(mse_train)\n",
    "train_rmse.append(rmse)\n",
    "print(\"rmse(Train):\",rmse)\n",
    "#test RMSE - Random Forest\n",
    "mse = mean_squared_error(y_test,y_pred_test)\n",
    "rmse=math.sqrt(mse)\n",
    "test_rmse.append(rmse)\n",
    "rmse\n",
    "print(\"rmse(Test):\",rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r_squared(Train): 0.9832541892672594\n",
      "r_squared(Test): 0.8935818635080255\n"
     ]
    }
   ],
   "source": [
    "#train R^2 - Random Forest\n",
    "r_sqr1 = r2_score(y_train, y_pred_train)\n",
    "print(\"r_squared(Train):\",r_sqr1)\n",
    "train_r2.append(r_sqr1)\n",
    "#test R^2 - Random Forest\n",
    "r_sqr = r2_score(y_test, y_pred_test)\n",
    "test_r2.append(r_sqr)\n",
    "print(\"r_squared(Test):\",r_sqr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>condition</td>\n",
       "      <td>0.016993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cylinders</td>\n",
       "      <td>0.082804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>drive</td>\n",
       "      <td>0.061292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fuel</td>\n",
       "      <td>0.049124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>manufacturer</td>\n",
       "      <td>0.081997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>odometer</td>\n",
       "      <td>0.169315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>state</td>\n",
       "      <td>0.019163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>title</td>\n",
       "      <td>0.006045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>transmission</td>\n",
       "      <td>0.008137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>type</td>\n",
       "      <td>0.053149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>year</td>\n",
       "      <td>0.451981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         feature  importance\n",
       "0      condition    0.016993\n",
       "1      cylinders    0.082804\n",
       "2          drive    0.061292\n",
       "3           fuel    0.049124\n",
       "4   manufacturer    0.081997\n",
       "5       odometer    0.169315\n",
       "6          state    0.019163\n",
       "7          title    0.006045\n",
       "8   transmission    0.008137\n",
       "9           type    0.053149\n",
       "10          year    0.451981"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature importance for Random Forest\n",
    "cat_columns=['manufacturer','condition','cylinders','fuel','title_status','transmission','type','state']\n",
    "feature_imp = pd.DataFrame(list(zip(random_forest.feature_importances_,x_train)),columns = (\"importance\",\"features\"))\n",
    "\n",
    "feature_split = pd.DataFrame(feature_imp[\"features\"].str.split(\"_\",n = 1, expand = True))\n",
    "feature_cat = pd.concat([feature_imp[\"importance\"], feature_split], axis=1, join='inner')\n",
    "feature_cat.columns = [\"importance\",\"feature\",\"split2\"]\n",
    "feature_score = feature_cat.groupby('feature', as_index=False)['importance'].sum()\n",
    "feature_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#feature importance plot for XGBoost model\n",
    "plt.figure(figsize=(12,6))\n",
    "sns.barplot(x=feature_score.feature, y=feature_score.importance,order = feature_score.sort_values('importance').feature)\n",
    "plt.title(\"Feature Importance for Random Forest\")\n",
    "plt.ylabel(\"Importance\")\n",
    "plt.xlabel(\"Features\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Average Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modeling for Average Regressor\n",
    "#Gradient Boosting\n",
    "y_gbtest_pred = gb_model.predict(x_test)\n",
    "y_gbtrain_pred = gb_model.predict(x_train)\n",
    "#XGBoost\n",
    "y_xgtest_pred = regressor.predict(x_test)\n",
    "y_xgtrain_pred = regressor.predict(x_train)\n",
    "#Random Forest\n",
    "y_rftest_pred = random_forest.predict(x_test)\n",
    "y_rftrain_pred = random_forest.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Average Regressor Model\n",
    "avg_test_pred = (0.4*y_rftest_pred + 0.35*y_gbtest_pred + 0.25*y_xgtest_pred)\n",
    "avg_train_pred = (0.4*y_rftrain_pred + 0.35*y_gbtrain_pred + 0.25*y_xgtrain_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse(Train): 0.15301317558731573\n",
      "rmse(Test): 0.23054174930161384\n"
     ]
    }
   ],
   "source": [
    "#train RMSE - Average Regressor\n",
    "mse_train = mean_squared_error(y_train, avg_train_pred)\n",
    "rmse = math.sqrt(mse_train)\n",
    "train_rmse.append(rmse)\n",
    "print(\"rmse(Train):\",rmse)\n",
    "#test RMSE - Average Regressor\n",
    "mse = mean_squared_error(y_test,avg_test_pred)\n",
    "rmse=math.sqrt(mse)\n",
    "test_rmse.append(rmse)\n",
    "rmse\n",
    "print(\"rmse(Test):\",rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r_squared(Train): 0.9561071081879771\n",
      "r_squared(Test): 0.8997177820113001\n"
     ]
    }
   ],
   "source": [
    "#train R^2 - Average Regressor\n",
    "r_sqr1 = r2_score(y_train, avg_train_pred)\n",
    "print(\"r_squared(Train):\",r_sqr1)\n",
    "train_r2.append(r_sqr1)\n",
    "#test R^2 - Average Regressor\n",
    "r_sqr = r2_score(y_test, avg_test_pred)\n",
    "test_r2.append(r_sqr)\n",
    "print(\"r_squared(Test):\",r_sqr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lasso Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Lasso Regression model\n",
    "lassoRegressor=Lasso(alpha= 0.007761033)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.007761033)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training the model\n",
    "lassoRegressor.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predict train\n",
    "lassoTrainPrediction=lassoRegressor.predict(x_train)\n",
    "#predict test\n",
    "lassoTestPrediction=lassoRegressor.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse(Train): 0.39881175668101554\n",
      "rmse(Test): 0.40101499468558394\n"
     ]
    }
   ],
   "source": [
    "#train RMSE - Lasso Regression\n",
    "mse_train = mean_squared_error(y_train, lassoTrainPrediction)\n",
    "rmse = math.sqrt(mse_train)\n",
    "train_rmse.append(rmse)\n",
    "print(\"rmse(Train):\",rmse)\n",
    "#test RMSE - Lasso Regression\n",
    "mse = mean_squared_error(y_test,lassoTestPrediction)\n",
    "rmse=math.sqrt(mse)\n",
    "test_rmse.append(rmse)\n",
    "rmse\n",
    "print(\"rmse(Test):\",rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r_squared(Train): 0.7018241659711835\n",
      "r_squared(Test): 0.6965787546457696\n"
     ]
    }
   ],
   "source": [
    "#train R^2 - Lasso Regression\n",
    "r_sqr1 = r2_score(y_train, lassoTrainPrediction)\n",
    "print(\"r_squared(Train):\",r_sqr1)\n",
    "train_r2.append(r_sqr1)\n",
    "#test R^2 - Lasso Regression\n",
    "r_sqr = r2_score(y_test, lassoTestPrediction)\n",
    "test_r2.append(r_sqr)\n",
    "print(\"r_squared(Test):\",r_sqr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ridge Regression Model\n",
    "ridgeRegressor=Ridge(alpha=0.415545)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=0.415545)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training the model\n",
    "ridgeRegressor.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predict train\n",
    "trainPrediction=ridgeRegressor.predict(x_train)\n",
    "#predict test\n",
    "testPrediction=ridgeRegressor.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse(Train): 0.15301317558731573\n",
      "rmse(Test): 0.23054174930161384\n"
     ]
    }
   ],
   "source": [
    "#train RMSE - Ridge Regression\n",
    "mse_train = mean_squared_error(y_train, avg_train_pred)\n",
    "rmse = math.sqrt(mse_train)\n",
    "train_rmse.append(rmse)\n",
    "print(\"rmse(Train):\",rmse)\n",
    "#test RMSE - Ridge Regression\n",
    "mse = mean_squared_error(y_test,avg_test_pred)\n",
    "rmse=math.sqrt(mse)\n",
    "test_rmse.append(rmse)\n",
    "rmse\n",
    "print(\"rmse(Test):\",rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r_squared(Train): 0.9561071081879771\n",
      "r_squared(Test): 0.8997177820113001\n"
     ]
    }
   ],
   "source": [
    "#train R^2 - Ridge Regression\n",
    "r_sqr1 = r2_score(y_train, avg_train_pred)\n",
    "train_r2.append(r_sqr1)\n",
    "print(\"r_squared(Train):\",r_sqr1)\n",
    "#test R^2 - Ridge Regression\n",
    "r_sqr = r2_score(y_test, avg_test_pred)\n",
    "test_r2.append(r_sqr)\n",
    "print(\"r_squared(Test):\",r_sqr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the RMSE and R^2 values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "models = ['Gradient Boosting', 'XGBoost', 'Random Forest', 'Average Regressor', 'Lasso Regression', 'Ridge REgression']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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+uorunXrdsFzHj9+nEWLFgEwZ84cAgICWLx4MR988AHt2rVj5cqVlChRgmrVqvHYY4/xyy+/UL58eb777jsATpw4QUJCAg8//DCzZs2idOnSTJs2jeeee44JEyZk+jnx9kztx4GJ1tqxnq8fNsbcBgwAhqRz3JvAH8AiUhW1gf7APmvtw56vNxljwoAnARW1RURERERERCRvid4PcwfDjl/hlpehUXcwxu1UIvlSejOqs0toaOg/BW2ADz/8kJkzZwKwe/du/vrrr38VtatUqULDhg0BuPrqq9mxY0e65+jcufN5X7dt2xaAevXqUadOnX9mW1etWpXdu3dTr149nnzySZ5++mnatGnDddddx/r161m/fj233HIL4LRLyYpZ2uDForZntvXVwDupHloANE/nuDuANkBj4O40dgn3jJHS98D9xhh/a23CZYcWEREREREREckprIU1U+H7IZAQC2VqweyHYd0MuPMDKFHl4mOISJ5TqFChfz7/5Zdf+PHHH4mIiKBgwYK0bNmS2NjYfx1ToECBfz739fXlzJkzGT5HyuN9fHzOG8vHx4fExESuvPJKVq5cydy5cxkyZAi33norHTp0oE6dOkRERFzWdabHm/eslAJ8gQOpth8AyqV1gDEmBBgLdLfWRl9g3HIXGNPPc87UY/Y1xqwwxqw4dOjQJcQXEREREREREXHJsZ0wuQPMGghlrmJG6DTuTnyNIze8CXtXwcjmEDECktNfKE5Ecr8iRYoQHZ12qfTEiRMUL16cggULEhUVxdKlS7M5nWPfvn0ULFiQbt268eSTT7Jq1Spq1qzJoUOH/ilqJyQksGHDhiw5n9cXigRsqq9NGtvOmgKMtNZe7NlPa8y0tmOtHQOMAWjSpMmFzisiIiIiIiIi4r7kZFg+Fn78HxiDvf0d3jl6DcMXbsfXx3Db8ep80fknqkW+4Mzg3vA1tP3YmcUtInlSyZIlueaaa6hbty5BQUGULVv2n8duu+02Ro0aRf369alZsybNmjVzJeO6desYPHgwPj4++Pv7M3LkSAICApgxYwaPPPIIJ06cIDExkUcffZQ6dTLfwsVY6506r6f9SAzQxVo7PcX24UBda23qXtkYYyyQ8i1GgzObPAkYaK0dY4xZDKyz1g5KcVxHYCpQML32I02aNLErVqzI5JWJiIiIiIiIiHjBoT9h9kOwOxKq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\n",
      "text/plain": [
       "<Figure size 1800x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[25,6])\n",
    "x = models\n",
    "plt.tick_params(labelsize=14)\n",
    "plt.plot(x, train_rmse, label = 'train_rmse')\n",
    "plt.plot(x, test_rmse, label = 'test_rmse')\n",
    "plt.legend()\n",
    "plt.title('RMSE-criterion for popular models for train and test datasets')\n",
    "plt.xlabel('Models')\n",
    "plt.ylabel('RMSE-criterion, %')\n",
    "plt.xticks(x, rotation='vertical')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[25,6])\n",
    "x = models\n",
    "plt.tick_params(labelsize=14)\n",
    "plt.plot(x, train_r2, label = 'train_r2')\n",
    "plt.plot(x, test_r2, label = 'test_r2')\n",
    "plt.legend()\n",
    "plt.title('R2-criterion for popular models for train and test datasets')\n",
    "plt.xlabel('Models')\n",
    "plt.ylabel('R2-criterion, %')\n",
    "plt.xticks(x, rotation='vertical')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deployment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Serilization and De-serialization using Pickle\n",
    "pickle.dump(random_forest, open('RandomForestModel.pkl','wb'))\n",
    "#inputing data to model\n",
    "input_data = pd.DataFrame([[0]*len(x_train.columns)], columns=x_train.columns)\n",
    "#for pickle use\n",
    "input_data.to_pickle(\"./input_format.pkl\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
